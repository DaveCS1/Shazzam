namespace ShazzamUnitTests.CodeGen
{
    using System;
    using System.Collections.Generic;

    using Microsoft.CSharp;

    using NUnit.Framework;

    using Shazzam;
    using Shazzam.CodeGen;

    public class CreatePixelShaderClassTests
    {
        [Test]
        public void GetSourceTextPixelShaderCtor()
        {
            var shaderModel = new ShaderModel(
                shaderFileName: "Foo.cs",
                generatedClassName: "Foo",
                generatedNamespace: "Shaders",
                description: "Description",
                targetFramework: TargetFramework.WPF,
                registers: new List<ShaderModelConstantRegister>
                    {
                        new ShaderModelConstantRegister(
                            registerName: "A",
                            registerType: typeof(double),
                            registerNumber: 1,
                            description: "description",
                            minValue: 0,
                            maxValue: 1,
                            defaultValue: 0)
                    });

            var actual = CreatePixelShaderClass.GetSourceText(new CSharpCodeProvider(), shaderModel, includePixelShaderConstructor: true);
            Console.Write(actual);
            var expected = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;

namespace Shaders
{
    
    
    /// <summary>Description</summary>
    public class Foo : ShaderEffect
    {
        
        public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty(""Input"", typeof(Foo), 0);
        
        public static readonly DependencyProperty AProperty = DependencyProperty.Register(""A"", typeof(double), typeof(Foo), new UIPropertyMetadata(((int)(0)), PixelShaderConstantCallback(1)));
        
        public Foo(PixelShader shader)
        {
            this.PixelShader = shader;

            this.UpdateShaderValue(InputProperty);
            this.UpdateShaderValue(AProperty);
        }
        
        public Brush Input
        {
            get
            {
                return ((Brush)(this.GetValue(InputProperty)));
            }
            set
            {
                this.SetValue(InputProperty, value);
            }
        }
        
        /// <summary>description</summary>
        public double A
        {
            get
            {
                return ((double)(this.GetValue(AProperty)));
            }
            set
            {
                this.SetValue(AProperty, value);
            }
        }
    }
}

";
            Assert.AreEqual(expected, actual);
        }

        [Test]
        public void GetSourceTextDefaultCtor()
        {
            var shaderModel = new ShaderModel(
                shaderFileName: "Foo.cs",
                generatedClassName: "Foo",
                generatedNamespace: "Shaders",
                description: "Description",
                targetFramework: TargetFramework.WPF,
                registers: new List<ShaderModelConstantRegister>
                               {
                                   new ShaderModelConstantRegister(
                                       registerName: "A",
                                       registerType: typeof(double),
                                       registerNumber: 1,
                                       description: "description",
                                       minValue: 0,
                                       maxValue: 1,
                                       defaultValue: 0)
                               });

            var actual = CreatePixelShaderClass.GetSourceText(new CSharpCodeProvider(), shaderModel, includePixelShaderConstructor: false);
            Console.Write(actual);
            var expected = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;

namespace Shaders
{
    
    
    /// <summary>Description</summary>
    public class Foo : ShaderEffect
    {
        
        public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty(""Input"", typeof(Foo), 0);
        
        public static readonly DependencyProperty AProperty = DependencyProperty.Register(""A"", typeof(double), typeof(Foo), new UIPropertyMetadata(((int)(0)), PixelShaderConstantCallback(1)));
        
        public Foo()
        {
            PixelShader pixelShader = new PixelShader();
            pixelShader.UriSource = new Uri(""/Shaders;component/Foo.ps"", UriKind.Relative);
            this.PixelShader = pixelShader;

            this.UpdateShaderValue(InputProperty);
            this.UpdateShaderValue(AProperty);
        }
        
        public Brush Input
        {
            get
            {
                return ((Brush)(this.GetValue(InputProperty)));
            }
            set
            {
                this.SetValue(InputProperty, value);
            }
        }
        
        /// <summary>description</summary>
        public double A
        {
            get
            {
                return ((double)(this.GetValue(AProperty)));
            }
            set
            {
                this.SetValue(AProperty, value);
            }
        }
    }
}

";
            Assert.AreEqual(expected, actual);
        }

        [Test]
        public void GetSourceTextDefaultCtorMinAndMax()
        {
            var shaderModel = new ShaderModel(
                shaderFileName: "Foo.cs",
                generatedClassName: "Foo",
                generatedNamespace: "Shaders",
                description: "Description",
                targetFramework: TargetFramework.WPF,
                registers: new List<ShaderModelConstantRegister>
                               {
                                   new ShaderModelConstantRegister(
                                       registerName: "A",
                                       registerType: typeof(double),
                                       registerNumber: 1,
                                       description: "description",
                                       minValue: -1,
                                       maxValue: 1,
                                       defaultValue: 0)
                               });

            var actual = CreatePixelShaderClass.GetSourceText(new CSharpCodeProvider(), shaderModel, includePixelShaderConstructor: false);
            Console.Write(actual);
            var expected = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;

namespace Shaders
{
    
    
    /// <summary>Description</summary>
    public class Foo : ShaderEffect
    {
        
        public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty(""Input"", typeof(Foo), 0);
        
        public static readonly DependencyProperty AProperty = DependencyProperty.Register(""A"", typeof(double), typeof(Foo), new UIPropertyMetadata(((int)(0)), PixelShaderConstantCallback(1)));
        
        public Foo()
        {
            PixelShader pixelShader = new PixelShader();
            pixelShader.UriSource = new Uri(""/Shaders;component/Foo.ps"", UriKind.Relative);
            this.PixelShader = pixelShader;

            this.UpdateShaderValue(InputProperty);
            this.UpdateShaderValue(AProperty);
        }
        
        public Brush Input
        {
            get
            {
                return ((Brush)(this.GetValue(InputProperty)));
            }
            set
            {
                this.SetValue(InputProperty, value);
            }
        }
        
        /// <summary>description</summary>
        public double A
        {
            get
            {
                return ((double)(this.GetValue(AProperty)));
            }
            set
            {
                this.SetValue(AProperty, value);
            }
        }
    }
}

";
            Assert.AreEqual(expected, actual);
        }
    }
}
